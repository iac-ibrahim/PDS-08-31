# -*- coding: utf-8 -*-
"""PDS-08-31(IBRAHIM).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ojkbcb7wH_bLwVTmqb11YZGEG41Nj1-1
"""

pip install scikit-learn imbalanced-learn matplotlib seaborn

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import roc_auc_score, classification_report, confusion_matrix
from imblearn.over_sampling import SMOTE
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset (replace 'creditcard.csv' with the actual path to your dataset)
data = pd.read_csv('/content/creditcard.csv')

# Explore dataset
print(data.head())
print(data.info())
print(data['Class'].value_counts())

# Feature Scaling (standardizing the 'Amount' column)
from sklearn.preprocessing import StandardScaler
data['Amount'] = StandardScaler().fit_transform(data[['Amount']])

# Split features and target
X = data.drop(['Class'], axis=1)
y = data['Class']

# Visualize class distribution before balancing
plt.figure(figsize=(6, 4))
sns.countplot(x=y)
plt.title('Class Distribution Before Balancing')
plt.show()
print(data.isnull().sum())
data = data.dropna()
data = data.fillna(data.mean())
print(data.isnull().sum())
# Apply SMOTE to handle class imbalance
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Visualize class distribution after balancing
plt.figure(figsize=(6, 4))
sns.countplot(x=y_resampled)
plt.title('Class Distribution After Balancing')
plt.show()

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Train the Random Forest Classifier
rf_model = RandomForestClassifier(random_state=42)
rf_model.fit(X_train, y_train)

# Make predictions
y_pred = rf_model.predict(X_test)
y_pred_prob = rf_model.predict_proba(X_test)[:, 1]

# Evaluate the model
roc_auc = roc_auc_score(y_test, y_pred_prob)
print(f'ROC-AUC Score: {roc_auc:.4f}')

print("Classification Report:")
print(classification_report(y_test, y_pred))

print("Confusion Matrix:")
conf_matrix = confusion_matrix(y_test, y_pred)
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

# Feature Importance
importances = rf_model.feature_importances_
features = X.columns
feature_importance_df = pd.DataFrame({'Feature': features, 'Importance': importances})
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

plt.figure(figsize=(10, 6))
sns.barplot(x='Importance', y='Feature', data=feature_importance_df)
plt.title('Feature Importance')
plt.show()